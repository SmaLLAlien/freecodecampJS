1
Intermediate Algorithm Scripting: Sum All Numbers in a Range

Solve
function sumAll(arr) {
  function sorting(a, b) {
    return a - b
  }
  arr.sort(sorting);
  let sum = 0;
  for(let i = arr[0]; i <= arr[arr.length - 1]; i++) {
    sum += i;
  }
  return sum;
}

sumAll([1, 4]);

2
Intermediate Algorithm Scripting: Diff Two Arrays

Solve
function diffArray(arr1, arr2) {
  var newArr = [];
  let concatArr = arr1.concat(arr2);
  newArr = concatArr.filter(findTheSame);
  function findTheSame(num) {
    if(arr1.indexOf(num) == -1 || arr2.indexOf(num) == -1) {
      return num;
    }
  }
  return newArr;
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

3
Intermediate Algorithm Scripting: Seek and Destroy

Solve
function destroyer(arr) {
  let argumentsArr = [];
  let resultArr = [];
  for( let i = 1; i < arguments.length; i++) {
    argumentsArr.push(arguments[i]);
  }
  arr.filter(getDiff);
  function getDiff(num) {
    if(argumentsArr.indexOf(num) == -1) {
        resultArr.push(num);
    }
  }
  return resultArr;
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3);

4
Intermediate Algorithm Scripting: Wherefore art thou

Solve
function whatIsInAName(collection, source) {
  // What's in a name?
  var arr = [];
  // Only change code below this line
  arr = collection.filter(compare);
  function compare(obj) {
    let countSameProp = 0;
    let countProp = 0;
    for(let key in source) {
      countProp++;
      if(obj.hasOwnProperty(key) && obj[key] == source[key]){
	      // check how many  same properties with the same value  have objects
        countSameProp++;
      }
    }
    if(countSameProp == countProp) {
	    // if all properties of source object are equal to the same properties obj  - return obj
      return obj;
    }
    else return undefined;
  }
  
  // Only change code above this line
  return arr;
}

whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });

5
Intermediate Algorithm Scripting: Spinal Tap Case

Solve
function spinalCase(str) {
  // "It's such a fine line between stupid, and clever."
  // --David St. Hubbins
  let arr = str.split(/\s|_|-|(?=[A-Z])/g).join("-").toLowerCase();
  return arr;
}

spinalCase('This Is Spinal Tap');

6
Intermediate Algorithm Scripting: Pig Latin

Solve
function translatePigLatin(str) {
  let vovels = /^[aouei]/gi;
  let consonants = /^[^aouei]+/i;
  if(vovels.test(str)){
	str = str.concat("way");
  }
  if(consonants.test(str)){
    if(/[aouie]/gi.test(str)) { //if str has some vowels
      str = str.concat(str.match(consonants)) + "ay";
      str = str.replace(consonants, "");
    }
    else { //if str doest have any vowels
      str = str + "ay";
    }
  }
  return str;
}

translatePigLatin("consonant");

7
Intermediate Algorithm Scripting: Search and Replace

Solve
function myReplace(str, before, after) {
  if(/^[A-Z]/.test(before[0])) {
    // if "before" has first upper letter => chage first letter in "after"
    after = after[0].toUpperCase() + after.substr(1, after.length - 1);
  }
  str = str.replace(before, after);
  return str;
}
myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");

8
Intermediate Algorithm Scripting: DNA Pairing

Solve
function pairElement(str) {
  let strArray = str.split("");
  let resArr = [];
  for(let i = 0; i < strArray.length; i++) {
    if(strArray[i] == "A") {
      resArr.push(["A", "T"]);
    }
    if(strArray[i] == "T") {
      resArr.push(["T", "A"]);
    }
    if(strArray[i] == "C") {
      resArr.push(["C", "G"]);
    }
    if(strArray[i] == "G") {
      resArr.push(["G", "C"]);
    }
  }
  return resArr;
}

pairElement("GCG");

9
Intermediate Algorithm Scripting: Missing letters

Solve
function fearNotLetter(str) {
  let first = str.charCodeAt(0);
  let last = str.charCodeAt(str.length - 1);
  let missingLetter = 0;
  // get array of letters
  str = str.toLowerCase().split("");
  // ger array of letter`s code
  let ArrOfCode = str.map((num) => {return num.charCodeAt(0)});
  // check if there is missing letter and return it
  for(let i = 0; i < ArrOfCode.length - 1; i++) {
    // dont check last letter
    if(i == ArrOfCode.length - 1) {
      break;
    }
    if(ArrOfCode[i + 1] != ArrOfCode[i] + 1) {
        missingLetter = ArrOfCode[i] + 1;
    }
  }
  if(missingLetter ==0) {
  return undefined;
  }
  // get letter from code
  missingLetter = String.fromCharCode(missingLetter);
  return missingLetter;
}

fearNotLetter("abce");

10
Intermediate Algorithm Scripting: Sorted Union

Solve
function uniteUnique(arr) {
  let resArr = [];
  // get one array from all arguments
  for( let i = 0; i < arguments.length; i++) {
    resArr = resArr.concat(arguments[i]);
  }
  return resArr.filter(getUnique);
  // check big array for uniques elements
  function getUnique(item, index, array) {
    if (array.indexOf(item) == index) {
      return item;
    } 
  }
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);

11
Intermediate Algorithm Scripting: Convert HTML Entities

Solve
function convertHTML(str) {
  // &colon;&rpar;
  let result = str.split("").map(changeCharacters).join("");
  function changeCharacters(num) {
    if(num.charCodeAt(0) == 38) {
      return num = "&amp;";
    }
    if(num.charCodeAt(0) == 60) {
      return num = "&lt;";
    }
    if(num.charCodeAt(0) == 62) {
      return num = "&gt;"
    }
    if(num.charCodeAt(0) == 34) {
      return num = "&quot;"
    }
    if(num.charCodeAt(0) == 39) {
      return num = "&apos;"
    }
    return num;
  }
  return result;
}

convertHTML("Dolce & Gabbana");

12
Intermediate Algorithm Scripting: Sum All Odd Fibonacci Numbers

Solve
function sumFibs(num) {
  let fiboArr = [];
  let prevFibo = 1;
  let nextFibo = 1;
  let sumFibo = 0;
	let sum = 0;
  // get all Fibonacci numbers
  for (let i = 0; ; i++) {
   sumFibo = prevFibo + nextFibo;
   // check task condition - num > Fibo
	 if(sumFibo > num) {
      break;
    }
    // sum all odd numbers
	if(sumFibo % 2 > 0) {
		sum += sumFibo;
    }
  prevFibo = nextFibo;
	nextFibo = sumFibo;
  }
  // add first two numbers (1,1)
  return sum + 2;
}

sumFibs(4);

13
Intermediate Algorithm Scripting: Sum All Primes

Solve
function sumPrimes(num) {
  let sum = 0;
  // take all numbers from 2 to num
  for(let i = 2; i <= num; i++) {
    let count = 0;
    // take all divisor from 1 to half of our current number
    for(let j = 1; j < i/2 + 1; j++) {
      if(i % j  == 0) {
        // check how many times we get remainder == 0, if 1 the i is prime 
        count++;
      }
    }
    if(count == 1) {
      // sum all primes
      sum+=i;
    }
  }
  return sum;
}

sumPrimes(10);

14
Intermediate Algorithm Scripting: Smallest Common Multiple

Solve
function smallestCommons(arr) {
  let max = Math.max(...arr);
  let min = Math.min(...arr);
  let smallestMultiply = 0;
  // check all the numbers higher our max
  for(let i = max; ; i+=max) {
    let count = 0;
  // check the reminder from number above and our numbers
    for(let j = min; j <= max; j++) {
      if(i % j != 0) {
        break
      }
      count++
    }
  // if number of zero reminders equals to quantity of our numbers - stop loop
    if(count == (max - min + 1)) {
      smallestMultiply = i;
      break;
    }
  }
  return smallestMultiply;
}


smallestCommons([1,5]);

15
Intermediate Algorithm Scripting: Drop it

Solve
function dropElements(arr, func) {
  // Drop them elements.
  for(let i = 0; i < arr.length;) {
    if(!func(arr[0])) {
      arr.shift();
    }
    else {
      break;
    }
  }
  return arr; 
}

dropElements([1, 2, 3], function(n) {return n < 3; });

16
Intermediate Algorithm Scripting: Steamroller

Solve
function steamrollArray(arr) {
  // I'm a steamroller, baby
  let res = [];
  function recursion(arr) {
    for(let i = 0; i < arr.length; i++) {
      if(Array.isArray(arr[i])) { //check if arr[i] has next level
        recursion(arr[i]);
      }
      else {
      res.push(arr[i]);
      }
    }
  }
  recursion(arr);
  return res;
}

steamrollArray([1, [2], [3, [[4]]]]);

17
Intermediate Algorithm Scripting: Binary Agents

Solve
function binaryAgent(str) {
  let array = str.split(" ");
  for(let i = 0; i < array.length; i++) {
    array[i] = String.fromCharCode(parseInt(array[i], 2))
  }
  let ourStr = array.join("");
  return ourStr;
}

binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");

18
